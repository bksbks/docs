

EKS Setup
==========

1.Create cluster on aws eks give cluster name ->select vpc and subnet -> create cluster role -> select k8s version-> create

2. Install aws cli and kubectl on your local system

3. Type aws configure and paste your access key and secret accesskey 

4. Then aws eks  --region us-east-2 describe-cluster --name clustername --query cluster.status

5. Then type aws eks  --region us-east-2 update-kubeconfig --name clustername

6. Add worker -> create role for nodes -> select image,instance type disk size and min size,max size and desired size of nodes 
   --> select vpc and subnet for worker nodes  --> create
   
   
   
   KODEKLOUD
   =========
   https://github.com/kodekloudhub/certified-kubernetes-administrator-course
 
 
 imparative commands
 -------------------
 kubectl run --image=nginx nginx
 kubectl create deployment --image=nginx nginx
 kubectl expose deployment nginx --port 80
 kubectl edit deployment nginx
 kubectl scale deployment nginx --replicas=5
 kubectl set image deployment nginx nginx=nginx:1.18	
 kubectl create -f deployment.yml
 
Generate POD Manifest YAML file (-o yaml). Don't create it(--dry-run)

kubectl run nginx --image=nginx --dry-run=client -o yaml

Generate Deployment YAML file (-o yaml). Don't create it(--dry-run)

kubectl create deployment --image=nginx nginx --dry-run=client -o yaml

kubectl create deployment nginx --image=nginx --dry-run=client -o yaml > nginx-deployment.yaml

kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml


Create a Service named redis-service of type ClusterIP to expose pod redis on port 6379

kubectl expose pod redis --port=6379 --name redis-service --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors)

Or

kubectl create service clusterip redis --tcp=6379:6379 --dry-run=client -o yaml (This will not use the pods labels as selectors, instead it will assume selectors as app=redis. You cannot pass in selectors as an option. So it does not work very well if your pod has a different label set. So generate the file and modify the selectors before creating the service)



Create a Service named nginx of type NodePort to expose pod nginx's port 80 on port 30080 on the nodes:

kubectl expose pod nginx --type=NodePort --port=80 --name=nginx-service --dry-run=client -o yaml

(This will automatically use the pod's labels as selectors, but you cannot specify the node port. You have to generate a definition file and then add the node port in manually before creating the service with the pod.)

Or

kubectl create service nodeport nginx --tcp=80:80 --node-port=30080 --dry-run=client -o yaml

(This will not use the pods labels as selectors)

labels
-------

kubectl get pods --selector app=nginx
kubectl label pod mypod env=testing
kubectl label --overwrite pod mypod env=prod
kubectl label pod mypod env- ---> delete the label
kubectl label pods --all env=develop ---> add label to all pods
kubectl get pods --show-labels --> show all labels


Node Taints
------------
kubectl taint node node01 spray=mortein:NoSchedule --> add taint

kubectl taint node node01 spray=mortein:NoSchedule-   --> remove taint
kubectl label node node01 size=large	

drain
-----
kubectl drain node01 --->drain node and pods on node would be created on other nodes.
kubectl uncordon node01 ---> newly created pods would be created again on node01
kubectl cordon node01 ---> will not allow pods to be created on its

login to container
------------------
“kubectl exec -it <pod_name> -c <container_name> — /bin/bash”

cluster info
------------
kubectl config view --> cluster information
kubectl config use-context cluster1 --> switch to cluster1


Generate certificates
---------------------
openssl genrsa -out ca.key 2048 (ca.key would be created)

openssl req -new -key ca.key -Subj "/CN=KUBERNETES-CA" ca.csr (ca.csr would be created)

openssl x509 -req -in ca.csr -signkey ca.key -out ca.crt (ca.crt would be created)

view certificate
-----------------
opessl x509 -in /etc/kebernetes/pki/apiserver.crt -text -noout

view services cluster ip range
------------------------------
cat /etc/kubernetes/manifests/kube-apiserver.yaml   | grep cluster-ip-range

nslookup
---------
kubectl exec hr -- nslookup mysql.payroll

create ingree rule using imperative way
----------------------------------------
kubectl create ingress ingress-pay -n critical-space --rule="/pay=pay-service:8282"



 
